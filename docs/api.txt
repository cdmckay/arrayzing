// This is just an ad-hoc API reference for me.
// A much cleaner, better documented one is in the works.

$s(["x", 2, "hoox", "HOO"]) // s["x", 2, "hoox", "HOO"]
	.filter(/x/)        // s["x", "hoox"]
	.gt(1)              // s["x"]
	.add("BLAH")        // s["x", "BLAH"]
	.isUpper();         // s["BLAH"]

$exp = $s([1, 2, 3, "3foo", "bar")	// s[1, 2, 3, "3foo"]
$exp.int() 				// [1, 2, 3, 3, NaN]
$exp.int({ allowNaN: false })		// [1, 2, 3, 3]
$exp.int({ strict: true })		// [1, 2, 3]

// Filters

.gt()	// filter only strings with a length gt
.gteq()
.lt()
.lteq()
.eq()	// filter only stings with length exactly equal to

.just(index) // equivalent to jQuery's eq()... reduce the array to this element

.uppercased() // keep only elements that are uppercased
.lowercased() // keep only elements that are lowercased

.filter(pattern)
.filter(string)
.filter(object) // object must implement toString()

.tagged() // has <html>-style tags

.not(pattern) // complement of filter
.not(string)
.not(object)

.tighten() // remove all empty strings or arrays or NaNs

.andSelf()
.end()


// Manipulation
.add(object)
.remove(object)
.swap(index1, index2)
.flatten	// removes all sub-arrays/zings and adds them to the main zing

.addAll
.removeAll
.retainAll

// General
.min // still needs behaviour for a mixed array
.max
.enclose(left [, right])	== .prepend(left).append(right)
.prepend(str)	// prefix all strings/arrays/numbers
.append(str)  // suffix all strings/arrays/numbers
.prechop
.chop

// String

.upper
.lower
.capitalize

.replace

.split

// Numeric
.sum()
.sum(2) // maybe, probably in a future version
.sum(2n+1)
.product

// Boolean
.or()  // applies boolize and returns the result of all elements or'd
.and() // applies boolize and returns the result of all elements and'd
.or(boolean) // or each element with the argument
.and(boolean) // and each element with the argument
.negate() // negate each element

// Inspection & Output
.length		// number of items in the array
.boolize
.boolize(index)
.intize
.intize(index)
.strize()
.strize(index)

.as(typefn) // attempts to convert all elements to the passed type by running typefn(element)
.as(typefn, index)

.get()
.get(index)

.toArray
.toString

// String plugin
.wordCount()	// number of words in the concatenation of the array
.wordCount(index) // number of words in a given array string
.dasherize
.underscore
.capWords
.reverseWords
.reverseCase
.stripSpaces
.stripTags